// src/lib/email.ts

/**
 * Sends an invitation email to a new user.
 *
 * NOTE: This is a placeholder. Replace with your actual email sending logic
 * using a service like SendGrid, Resend, Nodemailer, etc.
 *
 * @param email The email address of the recipient.
 * @param inviteLink The unique invitation link generated by Firebase Auth Actions.
 */
export async function sendInvitationEmail(email: string, inviteLink: string): Promise<void> {
    console.log(`--- Sending Invitation Email (Placeholder) ---`);
    console.log(`To: ${email}`);
    console.log(`Subject: You're invited to join OpSite!`);
    console.log(`Body:`);
    console.log(`Hello,`);
    console.log(`You have been invited to join your team on OpSite.`);
    console.log(`Please click the link below to complete your account setup:`);
    console.log(inviteLink);
    console.log(`--- End Email ---`);

    // --- TODO: Implement actual email sending ---
    // Example using a hypothetical email service client:
    //
    // import { emailClient } from './your-email-service-config'; // Import your configured client
    //
    // try {
    //   await emailClient.send({
    //     to: email,
    //     from: 'noreply@opsite.app', // Use a verified sender address
    //     subject: "You're invited to join OpSite!",
    //     html: `
    //       <h1>Welcome to OpSite!</h1>
    //       <p>You have been invited to join your team.</p>
    //       <p>Click the link below to complete your account setup:</p>
    //       <a href="${inviteLink}">Complete Setup</a>
    //       <p>If you did not expect this invitation, please ignore this email.</p>
    //     `,
    //     // Add text version for email clients that don't support HTML
    //     text: `Welcome to OpSite! You have been invited to join your team. Complete your setup here: ${inviteLink}`
    //   });
    //   console.log(`Actual invitation email sent to ${email}.`);
    // } catch (error) {
    //   console.error(`Failed to send actual invitation email to ${email}:`, error);
    //   // Rethrow or handle the error appropriately (e.g., log to monitoring service)
    //   throw new Error(`Failed to send invitation email: ${error.message}`);
    // }
    // -------------------------------------------

    // Simulate success for now
    return Promise.resolve();
}

/**
 * Sends a password reset email.
 *
 * NOTE: This is usually handled directly by Firebase Auth, but you might
 * need a custom implementation if using a different auth system or want
 * custom email templates. Firebase Auth provides `sendPasswordResetEmail`.
 *
 * @param email The email address of the user requesting a password reset.
 * @param resetLink The unique password reset link.
 */
export async function sendPasswordResetEmail(email: string, resetLink: string): Promise<void> {
     console.log(`--- Sending Password Reset Email (Placeholder) ---`);
     console.log(`To: ${email}`);
     console.log(`Subject: Reset Your OpSite Password`);
     console.log(`Body:`);
     console.log(`Hello,`);
     console.log(`You requested a password reset for your OpSite account.`);
     console.log(`Click the link below to set a new password:`);
     console.log(resetLink);
     console.log(`If you did not request this, please ignore this email.`);
     console.log(`--- End Email ---`);

     // --- TODO: Implement actual email sending ---
     // Use your chosen email service provider here.
     // -------------------------------------------

     return Promise.resolve();
}
